<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blowing in the wind</title>
    <link>https://zheng-bobo.github.io/</link>
    <description>Recent content on Blowing in the wind</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 11 Feb 2021 09:45:47 +0800</lastBuildDate>
    
	<atom:link href="https://zheng-bobo.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>（译）Liunx – IO Multiplexing – Select VS Poll VS Epoll</title>
      <link>https://zheng-bobo.github.io/post/%E8%AF%91liunx-io-multiplexing-select-vs-poll-vs-epoll/</link>
      <pubDate>Thu, 11 Feb 2021 09:45:47 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/%E8%AF%91liunx-io-multiplexing-select-vs-poll-vs-epoll/</guid>
      <description>导读 &amp;emsp;&amp;emsp;读这篇文章前可以先了解下Liunx5种I/O模型 &amp;emsp;&amp;emsp;参考文献: I/O Models &amp;ndash;Richard Stevens的《UNI</description>
    </item>
    
    <item>
      <title>CRSF &amp; CORS介绍</title>
      <link>https://zheng-bobo.github.io/todo/crsf-cros%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Thu, 04 Feb 2021 17:32:47 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/todo/crsf-cros%E4%BB%8B%E7%BB%8D/</guid>
      <description>导读 &amp;emsp;&amp;emsp;介绍CRSF(Cross-site request forgery)&amp;amp;CORS(Cross-origin resource sharing)之前，我们先介绍下HTTP,若读者对HTTP较熟悉，可以</description>
    </item>
    
    <item>
      <title>（译）Domain-Driven Design:Everything You Always Wanted to Know About it, But Were Afraid to Ask(1)</title>
      <link>https://zheng-bobo.github.io/post/domain-driven-design/</link>
      <pubDate>Tue, 02 Feb 2021 12:06:47 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/domain-driven-design/</guid>
      <description>Domain-Driven Design原文地址 &amp;emsp;&amp;emsp;随着个人代码库的扩展,其复杂性也不可避免地会随之增加。随着这种情况发生,按原本的意图去保持代码</description>
    </item>
    
    <item>
      <title>go汇编简易入门(Ⅱ)</title>
      <link>https://zheng-bobo.github.io/post/go%E6%B1%87%E7%BC%96%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A82/</link>
      <pubDate>Fri, 01 Jan 2021 12:34:14 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/go%E6%B1%87%E7%BC%96%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A82/</guid>
      <description>汇编角度看函数调用 &amp;emsp;&amp;emsp;我们以一个简单的例子来作为开始: 1 2 3 4 5 6 7 8 9 10 package main func main() { add(1, 1) } func add(a, b int64) (c int64) { c = a + b return } &amp;</description>
    </item>
    
    <item>
      <title>go汇编简易入门(1)</title>
      <link>https://zheng-bobo.github.io/post/go%E6%B1%87%E7%BC%96%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A81/</link>
      <pubDate>Wed, 30 Dec 2020 11:25:47 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/go%E6%B1%87%E7%BC%96%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A81/</guid>
      <description>程序的存储空间布局 &amp;emsp;&amp;emsp;进程(Process)是一个正在执行的程序实例(instance)。每个实例有自己的地址空间和执行</description>
    </item>
    
    <item>
      <title>CAP与服务发现组件比较</title>
      <link>https://zheng-bobo.github.io/post/cap%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E7%BB%84%E4%BB%B6%E6%AF%94%E8%BE%83/</link>
      <pubDate>Sat, 29 Feb 2020 09:41:00 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/cap%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E7%BB%84%E4%BB%B6%E6%AF%94%E8%BE%83/</guid>
      <description>CAP理论概述 一个分布式系统最多只能同时满足一致性（consistency）、可用性（Availability）和分区容错性（Partiti</description>
    </item>
    
    <item>
      <title>理解I/O：随机和顺序</title>
      <link>https://zheng-bobo.github.io/post/%E7%90%86%E8%A7%A3io-%E9%9A%8F%E6%9C%BA%E5%92%8C%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Thu, 06 Feb 2020 21:06:10 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/%E7%90%86%E8%A7%A3io-%E9%9A%8F%E6%9C%BA%E5%92%8C%E9%A1%BA%E5%BA%8F/</guid>
      <description>转：https://blog.csdn.net/BaiWfg2/article/details/52885287 &amp;emsp;&amp;emsp;Storage for DBAs: Ever been to one of those sushi restaurants where the food</description>
    </item>
    
    <item>
      <title>Use a Mutex or a channel ?</title>
      <link>https://zheng-bobo.github.io/post/use-a-mutex-or-a-channel/</link>
      <pubDate>Thu, 16 Jan 2020 11:27:00 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/use-a-mutex-or-a-channel/</guid>
      <description>Use a sync.Mutex or a channel? &amp;emsp;&amp;emsp;分别给了我们3个channel使用场景: 1.传递数据的所有权 2.分配工作单元 3.传达异步结果 2个mute</description>
    </item>
    
    <item>
      <title>http1.1与http2的区别</title>
      <link>https://zheng-bobo.github.io/post/http1.1%E4%B8%8Ehttp2%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Thu, 16 Jan 2020 10:25:00 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/http1.1%E4%B8%8Ehttp2%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>HTTP 1.1 &amp;emsp;&amp;emsp;1997 年 1 月，HTTP/1.1 版本发布，只比 1.0 版本晚了半年。它进一步完善了 HTTP 协议，一直用到了 20 年后的今天，直到现在还是最流行的版本。主要优化</description>
    </item>
    
    <item>
      <title>channel runtime源码分析</title>
      <link>https://zheng-bobo.github.io/post/runtime-channel/</link>
      <pubDate>Sun, 05 Jan 2020 11:19:10 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/runtime-channel/</guid>
      <description>&amp;emsp;&amp;emsp;Channel 是 Go 语言中一个非常重要的类型，是 Go 里的第一对象。通过 channel，Go 实现了通过通信来实现内存共享。Channel 是在多个 goroutine 之间传递数据</description>
    </item>
    
    <item>
      <title>Go实现raft协议(1)</title>
      <link>https://zheng-bobo.github.io/post/go%E5%AE%9E%E7%8E%B0raft%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Sun, 22 Dec 2019 17:13:00 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/go%E5%AE%9E%E7%8E%B0raft%E5%8D%8F%E8%AE%AE/</guid>
      <description>导读 &amp;emsp;&amp;emsp;实现思路来自于:MIT 6.824课程 Lab 2: Raft &amp;emsp;&amp;emsp;做实验前，你应该熟读raft论文，这里是: ra</description>
    </item>
    
    <item>
      <title>(译)Contiguous stacks</title>
      <link>https://zheng-bobo.github.io/post/%E8%AF%91contiguous-stacks/</link>
      <pubDate>Sat, 30 Nov 2019 13:14:00 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/%E8%AF%91contiguous-stacks/</guid>
      <description>Contiguous stacks原文地址 &amp;emsp;&amp;emsp;为每一个go协程分配一块连续的栈内存空间，内存在用完的时候会重新分配/复制增长。 为什么？ 目前的</description>
    </item>
    
    <item>
      <title>main goroutine调度源码分析(2)</title>
      <link>https://zheng-bobo.github.io/post/runtime-main-2/</link>
      <pubDate>Wed, 13 Nov 2019 22:20:10 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/runtime-main-2/</guid>
      <description>9.进入到runtime/proc.go,调度器初始化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43</description>
    </item>
    
    <item>
      <title>为什么都用快排而不用归并排序？</title>
      <link>https://zheng-bobo.github.io/post/why-quicksort-better-than-mergesort/</link>
      <pubDate>Wed, 13 Nov 2019 20:32:10 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/why-quicksort-better-than-mergesort/</guid>
      <description>汝之蜜糖，乙之砒霜。 快速排序： 1 2 3 * 最坏情况时间复杂度O(n^2) * 最好情况时间复杂度O(logn) * 平均时间复杂度O(nlgn) 归并排序</description>
    </item>
    
    <item>
      <title>main goroutine调度源码分析(1)</title>
      <link>https://zheng-bobo.github.io/post/runtime-main-1/</link>
      <pubDate>Sun, 10 Nov 2019 14:40:10 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/runtime-main-1/</guid>
      <description>汇编之下,一切踪迹皆显。 1.go程序入口_rt0_amd64_linux: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // TEXT 指令定义符号 _rt0_amd64_linux, 全局数据符号用 DATA 声</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zheng-bobo.github.io/note/%E6%89%B9%E5%88%A4%E6%80%A7%E6%80%9D%E7%BB%B4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zheng-bobo.github.io/note/%E6%89%B9%E5%88%A4%E6%80%A7%E6%80%9D%E7%BB%B4/</guid>
      <description>绪论 作者自己对批判性思维的定义：对思维方式的思考
成为优秀思考者的好处
如何成为优秀思考者&amp;ndash;&amp;gt;养成批判性思维方式&amp;ndash;&amp;gt;批判性思维的重要
详解批判性思维的概念&amp;ndash;&amp;gt;分析评估
再次强调批判性思维的重要，以及简单介绍了批判性思维的衡量标准
1 2 3 4  学习的本质--提高并控制自己的思维方式，知道了知识并不重要，知道如何获取知识，获取正确的知识更重要 丰田公司的“5Why分析法”就是一个很好的方式 很多时候你所谓的懂了并不是真的懂了，一旦深究就显得浅薄 如果你不能清晰准备地表述自己的观点，那就是你对所讲述的内容还不够了解   如果养成批判性思维 1.公正思维 &amp;ndash;&amp;gt; 特点:严于质己,摒弃诡辩思维，学会换位思考 &amp;ndash;&amp;gt;如何培养公正思维 | 先考虑不喜欢的观点 | 承认自己的不足和局限性 | 敢与主流相背，挑战自己的意识形态信念系统 | 先找出别人观点的合理处再质疑
| 同样的标准对待别人和自己 警惕善意谎言等自我欺骗 | 良好推理的过程和明确的信心建立信心
| 注重独立思考
小结：抵抗住外部遵从力量以及内部自我中心思想的影响，警惕那些可以令自己舒服的观点、符合自身利益的观点、满足自己自私需求的观点。
2.成为优秀思考者的几个阶段：
1.鲁莽的思考者:从不对自己的思考过程进行思考，不分析和评价自己的思维方式 只做出决定，对别人做出反馈，不会认真反思 2.质疑的思考者:能注意到我们思考过程的问题 在努力分析和评估自己的思维方式 在发掘那些能够产生思考的思维结构(如：概念、假设、推论、意义、观点) 考虑能够优化思维的品质(清晰性、准确性、精确性、相关性、逻辑性) 发现自我思维里的自欺行为 3.初级的思考者:分析情景或问题的逻辑性 清晰、准确地表达问题 检查信息的准确性和相关性 区分出原始信息和他人对此事件的描述信息 找出得出结论的假设 找出有偏见的信念、不公正的结论、错误使用的词汇和忽略的意义 注意到什么时候我们的私利会影响我们的观点 注意两点 教条专制主义&amp;ndash;相信真想不是通过推理和调查获得的，而是通过一些预先设定的、非理性的信念获得的。 主观相对主义&amp;ndash;相信不存在评判事务对错的思维标准。 4.练习中的思维者:编制一套计划&amp;ndash;在执行中检验计划&amp;ndash;找出一个有效的计划（不被情绪所控制） 利用“浪费”的时间 每天解决一个问题 将思维标准内化 坚持做思维日记 练习思维策略 重新塑造你的性格 改变你的自我 改变你看待事物的方法 关注自己的情绪 分析群体对你生活的影响
理解思维本性，理解头脑的基本机制 思维本性:自我中心 倾向于被自我中心的思维和感受所主导是人类在学习中面对的一个最基本的挑战。我们即可的欲望、痛苦、想法和感受深深地主导了我们的生活。出于本质上的自私，我们去寻求自我满足。&amp;ndash;&amp;gt; 可以去培养一个习惯开始，从此过程中，你可以体会到在枯燥无味坚持之后所带来的小有成就的更高层次的自我满足感</description>
    </item>
    
  </channel>
</rss>