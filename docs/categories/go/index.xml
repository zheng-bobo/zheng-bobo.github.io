<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Blowing in the wind</title>
    <link>https://zheng-bobo.github.io/categories/go/</link>
    <description>Recent content in go on Blowing in the wind</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 01 Jan 2021 12:34:14 +0800</lastBuildDate>
    
	<atom:link href="https://zheng-bobo.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go汇编简易入门(Ⅱ)</title>
      <link>https://zheng-bobo.github.io/post/go%E6%B1%87%E7%BC%96%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A82/</link>
      <pubDate>Fri, 01 Jan 2021 12:34:14 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/go%E6%B1%87%E7%BC%96%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A82/</guid>
      <description>汇编角度看函数调用 &amp;emsp;&amp;emsp;我们以一个简单的例子来作为开始: 1 2 3 4 5 6 7 8 9 10 package main func main() { add(1, 1) } func add(a, b int64) (c int64) { c = a + b return } &amp;</description>
    </item>
    
    <item>
      <title>go汇编简易入门(1)</title>
      <link>https://zheng-bobo.github.io/post/go%E6%B1%87%E7%BC%96%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A81/</link>
      <pubDate>Wed, 30 Dec 2020 11:25:47 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/go%E6%B1%87%E7%BC%96%E7%AE%80%E6%98%93%E5%85%A5%E9%97%A81/</guid>
      <description>程序的存储空间布局 &amp;emsp;&amp;emsp;进程(Process)是一个正在执行的程序实例(instance)。每个实例有自己的地址空间和执行</description>
    </item>
    
    <item>
      <title>Use a Mutex or a channel ?</title>
      <link>https://zheng-bobo.github.io/post/use-a-mutex-or-a-channel/</link>
      <pubDate>Thu, 16 Jan 2020 11:27:00 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/use-a-mutex-or-a-channel/</guid>
      <description>Use a sync.Mutex or a channel? &amp;emsp;&amp;emsp;分别给了我们3个channel使用场景: 1.传递数据的所有权 2.分配工作单元 3.传达异步结果 2个mute</description>
    </item>
    
    <item>
      <title>channel runtime源码分析</title>
      <link>https://zheng-bobo.github.io/post/runtime-channel/</link>
      <pubDate>Sun, 05 Jan 2020 11:19:10 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/runtime-channel/</guid>
      <description>&amp;emsp;&amp;emsp;Channel 是 Go 语言中一个非常重要的类型，是 Go 里的第一对象。通过 channel，Go 实现了通过通信来实现内存共享。Channel 是在多个 goroutine 之间传递数据</description>
    </item>
    
    <item>
      <title>Go实现raft协议(1)</title>
      <link>https://zheng-bobo.github.io/post/go%E5%AE%9E%E7%8E%B0raft%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Sun, 22 Dec 2019 17:13:00 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/go%E5%AE%9E%E7%8E%B0raft%E5%8D%8F%E8%AE%AE/</guid>
      <description>导读 &amp;emsp;&amp;emsp;实现思路来自于:MIT 6.824课程 Lab 2: Raft &amp;emsp;&amp;emsp;做实验前，你应该熟读raft论文，这里是: ra</description>
    </item>
    
    <item>
      <title>main goroutine调度源码分析(2)</title>
      <link>https://zheng-bobo.github.io/post/runtime-main-2/</link>
      <pubDate>Wed, 13 Nov 2019 22:20:10 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/runtime-main-2/</guid>
      <description>9.进入到runtime/proc.go,调度器初始化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43</description>
    </item>
    
    <item>
      <title>main goroutine调度源码分析(1)</title>
      <link>https://zheng-bobo.github.io/post/runtime-main-1/</link>
      <pubDate>Sun, 10 Nov 2019 14:40:10 +0800</pubDate>
      
      <guid>https://zheng-bobo.github.io/post/runtime-main-1/</guid>
      <description>汇编之下,一切踪迹皆显。 1.go程序入口_rt0_amd64_linux: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // TEXT 指令定义符号 _rt0_amd64_linux, 全局数据符号用 DATA 声</description>
    </item>
    
  </channel>
</rss>